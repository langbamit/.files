declare-option str file_search_command 'fd --type f --follow --hidden'

## Install packages manager
evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "https://github.com/andreyorst/plug.kak" noload
plug "https://github.com/h-youhei/kakoune-surround" config %{
    declare-user-mode surround
    map global surround s ':surround<ret>' -docstring 'surround'
    map global surround c ':change-surround<ret>' -docstring 'change'
    map global surround d ':delete-surround<ret>' -docstring 'delete'
    map global surround t ':select-surrounding-tag<ret>' -docstring 'select tag'
    map global user s ':enter-user-mode surround<ret>' -docstring 'surround mode'
}

plug "https://github.com/andreyorst/smarttab.kak" defer smarttab %{
	set-option global softtabstop 4
} config %{
    # default using expandtab
    hook global WinSetOption filetype=.* expandtab

    hook global WinSetOption filetype=(c|cpp) smarttab
}
plug "https://github.com/dead10ck/auto-pairs.kak" branch "remove-kcr"  defer auto-pairs %{
    auto-pairs-enable
}

# plug "https://github.com/jbomanson/search-doc.kak" defer search-doc %{
#     # Optional suggestion:
#     alias global sd search-doc
# } demand search-doc

plug 'https://github.com/delapouite/kakoune-buffers' %{
    map global user b ': enter-user-mode -lock buffers<ret>'   -docstring 'buffers (lock)…'
    hook global WinDisplay .* info-buffers
}

plug "https://github.com/delapouite/kakoune-text-objects"

plug "https://github.com/occivink/kakoune-expand" config %{
    map -docstring "expand" global user e ': expand<ret>'
    declare-user-mode expand
    map -docstring "expand ↻ mode" global user E ': expand; enter-user-mode -lock expand<ret>'
    map -docstring "expand" global expand <space> ': expand<ret>'
}
plug "https://github.com/occivink/kakoune-vertical-selection"
plug "https://github.com/andreyorst/fzf.kak" config %{
    map global normal <c-p> ': fzf-mode<ret>'
} defer fzf %{
    set-option global fzf_implementation "sk"
} defer fzf-file %{
    set-option global fzf_file_command "%opt{file_search_command}"
    set-option global fzf_highlight_command "bat"
} defer fzf-grep %{
    set-option global fzf_grep_command "rg"
}

evaluate-commands %{
    evaluate-commands %sh{
      kcr init kakoune
    }

    try %{
       # ensure we're running under tmux
       evaluate-commands %sh{
           [ -n "$TMUX" ] || echo 'fail tmux not detected'
       }

       define-command tmux-terminal-popup -params 1.. -shell-completion -docstring '
       tmux-terminal-popup <program> [<arguments>]: create a new terminal as a tmux popup
       The program passed as argument will be executed in the new terminal' \
       %{
           tmux-terminal-impl 'display-popup -w80% -h80% -d #{PWD} -E' %arg{@}
       }

       alias global popup tmux-terminal-popup
    } catch %{
    #    # echo -debug %val{error}
    }

}

define-command -override ranger %{
    connect popup sh -c %{
        echo $PWD > kkk.txt
        export RANGER_DIR=/tmp/ranger-dir-$1
        ranger --choosefiles=/tmp/ranger-files-$1 --choosedir=$RANGER_DIR $([ -f  $RANGER_DIR ] && cat $RANGER_DIR || echo $2)
        while read f; do
            kcr -s $KAKOUNE_SESSION -c $KAKOUNE_CLIENT edit $f
        done < /tmp/ranger-files-$1
    } -- %val{client_pid} %val{client_env_PWD}
}

map global user r ':ranger<ret>'



def load-settings -params 1 %{
    try %{
        source "%val{config}/%arg{1}.kak"
    } catch %{
        echo -debug  %val{error}
    }
}
load-settings "lsp"


## Hide release notes from latest version
set-option global startup_info_version 20200901

set-option global grepcmd "rg --no-heading --line-number --column --sort path"

set-option global ui_options ncurses_status_on_top=true
set-option global ui_options ncurses_enable_mouse=false
set-option global ui_options ncurses_assistant=dilbert


add-highlighter global/ show-whitespaces  -tab "→" -lf "↲" -spc "·" # -nbsp "·" 
add-highlighter global/ show-matching
# Hooks
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:+u }
hook global WinCreate ^[^*]+$ %{ add-highlighter window/ number-lines -hlcursor -relative }

hook global WinCreate .* %{

}

# Enable editor config
# ────────────────────
set global tabstop 4
set global indentwidth 4

hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Custom mappings
# ───────────────────────────────────

# override default mappings
map global normal ` <a-`>   # use <a-`> in tmux for easy toggle zoom panel


map -docstring "xml tag object" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

# comment
map -docstring 'comment line' global normal '#' :comment-line<ret> 
map -docstring 'comment block' global normal '<a-#>' :comment-block<ret>

# Editing file
map -docstring 'save' global normal <c-s> ':write; echo file saved<ret>'
map -docstring 'quit' global normal <c-q> ':quit<ret>'
map -docstring 'close buffer' global normal <c-w> ':delete-buffer<ret>'

map -docstring 'delete to end of line' global normal D '<a-l>d'
map -docstring 'yank to end of line' global normal Y '<a-l>y'

map global normal = ':prompt math: %{exec "a%val{text}<lt>esc>|bc<lt>ret>"}<ret>'
# System clipboard handling
# ─────────────────────────

evaluate-commands %sh{
    case $(uname) in
        Linux) copy="xclip -i"; paste="xclip -o" ;;
        Darwin)  copy="pbcopy"; paste="pbpaste" ;;
    esac
    printf "map global user -docstring 'paste (after) from clipboard' p '<a-!>%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (before) from clipboard' P '!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'paste (next-new-line) from clipboard' <a-p> '<a-o>gll!%s<ret>'\n" "$paste"
    printf "map global user -docstring 'yank to primary' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 primary}<ret>'\n" "$copy"
    printf "map global user -docstring 'yank to clipboard' Y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy -selection clipboard"
    printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}
# Highlight the word under the cursor
# ───────────────────────────────────

set-face global CurWord default,rgba:80808040
hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w <a-k>\A\w+\z<ret>
        add-highlighter -override global/curword regex "\b\Q%val{selection}\E\b" 0:CurWord
    } catch %{
        add-highlighter -override global/curword group
    } }
}


colorscheme dracula

# Enable <tab>/<s-tab> for insert completion selection
# ──────────────────────────────────────────────────────

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }


# define-command find -menu -params 1 -shell-script-candidates %{ $kak_opt_file_search_command  } %{ edit %arg{1} }

define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) } }

# Aliases
alias global h doc

# Subvert (cargo install kak-subvert)
declare-user-mode change-case
# map global user y ':enter-user-mode change-case<ret>' -docstring 'change case mode'
map global change-case  c '| kak-subvert camel <ret>'     -docstring "camelCase"
map global change-case  h '| kak-subvert camel <ret>'     -docstring "Http-Case"
map global change-case  k '| kak-subvert kebab <ret>'     -docstring "kebab-case"
map global change-case  p '| kak-subvert pascal <ret>'    -docstring "PascalCase"
map global change-case  . '| kak-subvert sentence <ret>'  -docstring "Sentence case"
map global change-case  s '| kak-subvert snake <ret>'     -docstring "snake_case"
map global change-case  S '| kak-subvert screaming <ret>' -docstring "SCREAMING_CASE"
map global change-case  t '| kak-subvert train <ret>'     -docstring "Train-Case"
map global change-case  T '| kak-subvert title <ret>'     -docstring "Title Case"
map global change-case  u '| kak-subvert ugly <ret>'      -docstring "Ugly_Case"


# Load local Kakoune config file if it exists
# ───────────────────────────────────────────

# evaluate-commands %sh{ [ -f $kak_config/local.kak ] && echo "source $kak_config/local.kak" }
